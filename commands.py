from aiogram.utils.chat_action import ChatActionSender
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram import types, Router, F

from keybords import istart_kb, mainInfo, unreg_kb, get_reg, cancelkb 
from DataBase import redis_bot as redis
from createBot import bot, FSM_


command_router = Router()

#====================ü¢Éü¢Éü¢É===COMMAND_START===ü¢Éü¢Éü¢É====================================================================================================================

@command_router.message(Command('start', ignore_case=True), StateFilter(None))
async def startM(message: types.Message):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        await bot.send_message(chat_id=message.chat.id, reply_markup=istart_kb(),
                                text=f"<b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}</b>\
                                    \n\nüîé <b>–ü–æ–∏—Å–∫</b> - –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –º–µ–¥–∏–∞\
                                    \n\nüìñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b> - –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –±–æ—Ç–æ–º")       

@command_router.callback_query(F.data == "start")
async def startC(callback: types.CallbackQuery):
    await callback.answer()
    async with ChatActionSender.typing(bot=bot, chat_id=callback.message.chat.id):    
        try:
            await bot.edit_message_text(text=f"<b>–ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}</b>\
                                        \n\nüîé <b>–ü–æ–∏—Å–∫</b> - –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –º–µ–¥–∏–∞\
                                        \n\nüìñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b> - –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –±–æ—Ç–æ–º",
                                        chat_id=callback.message.chat.id, message_id=callback.message.message_id, reply_markup=istart_kb())
        except Exception as e:
            print(f"Commands 29: {e}")
            await bot.send_message(text=f"<b>–ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}</b>\
                                        \n\nüîé <b>–ü–æ–∏—Å–∫</b> - –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –º–µ–¥–∏–∞\
                                        \n\nüìñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b> - –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –±–æ—Ç–æ–º",
                                chat_id=callback.message.chat.id, reply_markup=istart_kb())

#====================ü¢Éü¢Éü¢É===COMMAND_SEARCH===ü¢Éü¢Éü¢É=====================================================================================================================

@command_router.message(Command('search', ignore_case=True), StateFilter(None))
async def searchM(message: types.Message, state: FSMContext): 
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        d1 = await bot.send_message(text="–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π <b>–û—Ç–º–µ–Ω–∞</b>",
                                    chat_id=message.chat.id, reply_markup=cancelkb)
        await state.set_state(FSM_.req)
        d2 = await bot.send_message(text="–î–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ, –ø—Ä–∏–¥—É–º–∞–π –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞(—Ç–µ–≥–∏):", 
                                    chat_id=message.chat.id)
        redis.sadd('todelete', [d1.message_id, d2.message_id])

@command_router.callback_query(F.data == "search")
async def searchC(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    async with ChatActionSender.typing(bot=bot, chat_id=callback.message.chat.id):
        try: 
            d1 = await bot.edit_message_text(text="–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π <b>–û—Ç–º–µ–Ω–∞</b>",
                                            chat_id=callback.message.chat.id, message_id=callback.message.message_id, reply_markup=cancelkb)
        except Exception as e:
            print(f"Commands 66: {e}")
            d1 = await bot.send_message(text="–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π <b>–û—Ç–º–µ–Ω–∞</b>", 
                                    chat_id=callback.message.chat.id, reply_markup=cancelkb)
        await state.set_state(FSM_.req)
        d2 = await bot.send_message(text="–î–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ, –ø—Ä–∏–¥—É–º–∞–π –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞(—Ç–µ–≥–∏):", 
                                    chat_id=callback.message.chat.id) 
        redis.sadd('todelete', [d1.message_id, d2.message_id])

#====================ü¢Éü¢Éü¢É===ABILITY_to_DELETE_PHOTO===ü¢Éü¢Éü¢É=====================================================================================================================

@command_router.callback_query(F.data == "delete_photo")
async def delete_photoC(callback: types.CallbackQuery):
    await callback.answer()
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id) 

#====================ü¢Éü¢Éü¢É===COMMAND_REGISTRATION===ü¢Éü¢Éü¢É=====================================================================================================================

@command_router.callback_query(F.data == 'registration')
async def register(callback: types.CallbackQuery):
    callback.answer()

    def get_registerText() -> str:
        if len(get_reg()) == 0:
            return "<b>–ü—Ä–∏–≤–µ—Ç, {}</b>\n\n–í–æ–∑–º–æ–∂–Ω–æ —Ç—ã –ø–µ—Ä–≤—ã–π —Ä–∞–∑ —Ä–∞–±–æ—Ç–∞–µ—à—å —Å —ç—Ç–∏–º –±–æ—Ç–æ–º\
                    \n\n–¢–µ–±–µ —Å–ª–µ–¥—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, —Ç–æ–µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–≤–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞:\
                    \n <i>PixaBay</i>, <i>Pexels</i>, <i>Unsplash</i>\
                    \n\n–≠—Ç–∞ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–π–º—ë—Ç –æ—Ç 5 –¥–æ 10 –º–∏–Ω—É—Ç, –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º —Ç–µ–±–µ –Ω–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —ç—Ç–∏–º –∑–∞–Ω–∏–º–∞—Ç—å—Å—è, —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç —Ç–µ–±—è –∑–∞–ø–æ–º–Ω–∏—Ç\
                    \n\n–í—ã–±–µ—Ä–∏ —Å–µ—Ä–≤–∏—Å, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å" 
        else:
            return "<b>–ü—Ä–∏–≤–µ—Ç, {}</b>\n\n–£ —Ç–µ–±—è –µ—â—ë –µ—Å—Ç—å –Ω–µ–∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã\
                    \n\n–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞, —Ç–µ–±–µ —Å–ª–µ–¥—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–µ—Ä–≤–∏—Å—ã"
        
    await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, 
                                    text=get_registerText().format(callback.from_user.first_name),
                                    reply_markup=unreg_kb())

#====================ü¢Éü¢Éü¢É===COMMAND_INFO=and=INFO_block===ü¢Éü¢Éü¢É=====================================================================================================================

@command_router.message(Command('info', ignore_case=True), StateFilter(None))
async def mainInfoM(message: types.Message):
    await bot.send_message(text="üìñ –ó–î–ï–°–¨ –ë–£–î–ï–¢ –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø\n\nüèóÔ∏è[–†–ê–ë–û–¢–ê –í –ü–†–û–¶–ï–°–°–ï]‚è≥", 
                           chat_id=message.chat.id, reply_markup=mainInfo('info'))
                   
@command_router.callback_query(F.data == "info")
async def mainInfoC(callback: types.CallbackQuery):
    await callback.answer()
    await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, 
                                text="üìñ –ó–î–ï–°–¨ –ë–£–î–ï–¢ –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø\n\nüèóÔ∏è[–†–ê–ë–û–¢–ê –í –ü–†–û–¶–ï–°–°–ï]‚è≥", 
                                reply_markup=mainInfo(callback)) 

@command_router.callback_query(F.data == "services")
async def servicesinfo(callback: types.CallbackQuery):
    await callback.answer()
    await bot.edit_message_text(text="–û —Å–µ—Ä–≤–∏—Å–∞—Ö...üìö\n\nüèóÔ∏è[–†–ê–ë–û–¢–ê –í –ü–†–û–¶–ï–°–°–ï]‚è≥", 
                                chat_id=callback.message.chat.id, message_id=callback.message.message_id, 
                                reply_markup=mainInfo(callback))

@command_router.callback_query(F.data == "requests")
async def requestsinfo(callback: types.CallbackQuery):
    await callback.answer()
    await bot.edit_message_text(text="–û –∑–∞–ø—Ä–æ—Å–∞—Ö...üîé\n\nüèóÔ∏è[–†–ê–ë–û–¢–ê –í –ü–†–û–¶–ï–°–°–ï]‚è≥", 
                                chat_id=callback.message.chat.id, message_id=callback.message.message_id, 
                                reply_markup=mainInfo(callback))

@command_router.callback_query(F.data == "commands")
async def commandsinfo(callback: types.CallbackQuery):
    await callback.answer()
    await bot.edit_message_text(text="–û –∫–æ–º–º–∞–Ω–¥–∞—Ö...üí¨\n\nüèóÔ∏è[–†–ê–ë–û–¢–ê –í –ü–†–û–¶–ï–°–°–ï]‚è≥", 
                                chat_id=callback.message.chat.id, message_id=callback.message.message_id, 
                                reply_markup=mainInfo(callback))

@command_router.callback_query(F.data == "register")
async def registerinfo(callback: types.CallbackQuery):
    await callback.answer()
    await bot.edit_message_text(text="–û —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ö —Ç–æ–∫–µ–Ω–æ–≤...‚úèÔ∏è\n\nüèóÔ∏è[–†–ê–ë–û–¢–ê –í –ü–†–û–¶–ï–°–°–ï]‚è≥",
                                chat_id=callback.message.chat.id, message_id=callback.message.message_id, 
                                reply_markup=mainInfo(callback))

@command_router.callback_query(F.data == "aboutbot")
async def aboutinfo(callback: types.CallbackQuery):
    await callback.answer()
    await bot.edit_message_text(text="–û –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞...ü§ñ\n\nüèóÔ∏è[–†–ê–ë–û–¢–ê –í –ü–†–û–¶–ï–°–°–ï]‚è≥", 
                                chat_id=callback.message.chat.id, message_id=callback.message.message_id, 
                                reply_markup=mainInfo(callback))