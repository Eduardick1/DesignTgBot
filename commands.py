from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from createBot import bot, FSM_
from keybords import istartkb, mainInfo, cancelkb
from DataBase import redis_bot as redis

command_router = Router()


@command_router.message(Command('start', ignore_case=True))
async def startM(message: types.Message):
    await bot.send_message(chat_id=message.chat.id,
                            text=f"<b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}</b>\n\n–ú–æ–∂–µ—à—å —Å—Ä–∞–∑—É –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–æ–π üîé<b>–ü–æ–∏—Å–∫</b>\n\n–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ <b>üìñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>, —á—Ç–æ–±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –±–æ—Ç–æ–º –ø–æ–ª—É—á—à–µ", # type: ignore
                            reply_markup=istartkb)
        

@command_router.callback_query(F.data == "start")
async def startC(message: types.CallbackQuery):
    await message.answer()
    try:
        await bot.edit_message_text(chat_id=message.message.chat.id, message_id=message.message.message_id, 
                                    text=f"<b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}</b>\n\n–ú–æ–∂–µ—à—å —Å—Ä–∞–∑—É –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–æ–π üîé<b>–ü–æ–∏—Å–∫</b>\n\n–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ <b>üìñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>, —á—Ç–æ–±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –±–æ—Ç–æ–º –ø–æ-–ª—É—á—à–µ",
                                    reply_markup=istartkb)
    except Exception as e:
        print(f"Commands 29: {e}")
        await bot.send_message(chat_id=message.message.chat.id, 
                               text=f"<b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}</b>\n\n–ú–æ–∂–µ—à—å —Å—Ä–∞–∑—É –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–æ–π üîé<b>–ü–æ–∏—Å–∫</b>\n\n–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ <b>üìñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>, —á—Ç–æ–±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –±–æ—Ç–æ–º –ø–æ–ª—É—á—à–µ",
                               reply_markup=istartkb)

@command_router.message(Command('search', ignore_case=True))
async def searchM(message: types.Message, state: FSMContext): 
    d1 = await bot.send_message(chat_id=message.chat.id, 
                            text="–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π üöÆ <b>–û—Ç–º–µ–Ω–∞</b>",  reply_markup=cancelkb)
    redis.sadd('todelete', d1.message_id)
    await state.set_state(FSM_.req)
    d2 = await bot.send_message(chat_id=message.chat.id, 
                            text="–î–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ, –ø—Ä–∏–¥—É–º–∞–π –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞(—Ç–µ–≥–∏):")
    redis.sadd('todelete', d2.message_id)


@command_router.callback_query(F.data == "search")
async def searchC(message: types.CallbackQuery, state: FSMContext):

    await message.answer()
    try: 
        d1 = await bot.edit_message_text(chat_id=message.message.chat.id,
                                    message_id=message.message.message_id,
                                    text="–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π üöÆ <b>–û—Ç–º–µ–Ω–∞</b>", 
                                    reply_markup=cancelkb)
    except Exception as e:
        print(f"Commands 66: {e}")
        d1 = await bot.send_message(chat_id=message.message.chat.id,
                            text="–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π üöÆ <b>–û—Ç–º–µ–Ω–∞</b>", 
                            reply_markup=cancelkb)
    redis.sadd('todelete', d1.message_id)
    await state.set_state(FSM_.req)
    d2 = await bot.send_message(chat_id=message.message.chat.id, 
                            text="–î–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ, –ø—Ä–∏–¥—É–º–∞–π –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞(—Ç–µ–≥–∏):") 
    redis.sadd('todelete', d2.message_id)


@command_router.callback_query(F.data == "delete_photo")
async def delete_photoC(message: types.CallbackQuery):
    await message.answer()
    await bot.delete_message(chat_id=message.message.chat.id, message_id=message.message.message_id) 


@command_router.message(Command('info', ignore_case=True))
async def mainInfoM(message: types.Message):
    await bot.send_message(chat_id=message.chat.id, text="üìñ –ó–î–ï–°–¨ –ë–£–î–ï–¢ –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø üèóÔ∏è[–†–ê–ë–û–¢–ê –í –ü–†–û–¶–ï–°–°–ï]‚è≥",
                                reply_markup=mainInfo('info'))
        
            
@command_router.callback_query(F.data == "info")
async def mainInfoC(message: types.CallbackQuery):
    await message.answer()
    await bot.edit_message_text(chat_id=message.message.chat.id, message_id=message.message.message_id, 
                                text="üìñ –ó–î–ï–°–¨ –ë–£–î–ï–¢ –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø üèóÔ∏è[–†–ê–ë–û–¢–ê –í –ü–†–û–¶–ï–°–°–ï]‚è≥", 
                                reply_markup=mainInfo(message)) 

@command_router.callback_query(F.data == "services")
async def servicesinfo(message: types.CallbackQuery):
    await message.answer()
    await bot.edit_message_text(chat_id=message.message.chat.id, message_id=message.message.message_id, 
                                text="–û —Å–µ—Ä–≤–∏—Å–∞—Ö...üìö", 
                                reply_markup=mainInfo(message))

@command_router.callback_query(F.data == "requests")
async def requestsinfo(message: types.CallbackQuery):
    await message.answer()
    await bot.edit_message_text(chat_id=message.message.chat.id, message_id=message.message.message_id, 
                                text="–û –∑–∞–ø—Ä–æ—Å–∞—Ö...üîé", 
                                reply_markup=mainInfo(message))

@command_router.callback_query(F.data == "commands")
async def commandsinfo(message: types.CallbackQuery):
    await message.answer()
    await bot.edit_message_text(chat_id=message.message.chat.id, message_id=message.message.message_id, 
                                text="–û –∫–æ–º–º–∞–Ω–¥–∞—Ö...üí¨", 
                                reply_markup=mainInfo(message))

@command_router.callback_query(F.data == "register")
async def registerinfo(message: types.CallbackQuery):
    await message.answer()
    await bot.edit_message_text(chat_id=message.message.chat.id, message_id=message.message.message_id, 
                                text="–û —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ö —Ç–æ–∫–µ–Ω–æ–≤...‚úèÔ∏è", 
                                reply_markup=mainInfo(message))

@command_router.callback_query(F.data == "aboutbot")
async def aboutinfo(message: types.CallbackQuery):
    await message.answer()
    await bot.edit_message_text(chat_id=message.message.chat.id, message_id=message.message.message_id, 
                                text="–û –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞...ü§ñ", 
                                reply_markup=mainInfo(message))




    

    
    
    
    
    

    

    
    
    
