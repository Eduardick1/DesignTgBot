from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
from aiogram.utils.chat_action import ChatActionSender
from aiogram.fsm.context import FSMContext
from aiogram import Router, F

from DataBase import coll, redis_reg, redis_bot
from keybords import unreg_kb, get_reg
from createBot import bot, tokenfsm

from asyncio import sleep


register_router = Router()


#====================ü¢Éü¢Éü¢É===FSM_REGISTERING_PIXABAY_token===ü¢Éü¢Éü¢É=====================================================================================================================

@register_router.callback_query(F.data == 'pix_reg')
async def start_reg_pix(callback: CallbackQuery, state: FSMContext):
    callback.answer()
    d=await bot.edit_message_text(message_id=callback.message.message_id, chat_id=callback.message.chat.id, 
                                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="PixaBay", url="https://pixabay.com/api/docs/")]]), 
                                text=f"<i>PixaBay</i>\
                                    \n\n–ü–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç <i>Pixabay</i>\
                                    \n<b>–ü–æ–∂–∞–π–ª—É—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª–µ–¥—É–π –∫–∞–∂–¥–æ–º—É –ø—É–Ω–∫—Ç—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>‚Ü¥\
                                    \n\n<i>1</i>) –ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —Ç—ã –ø–æ–ø–∞–¥–∞–µ—à—å –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ API\
                                    \n<i>2</i>) –ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ –≥–ª–∞–≤–∞–º '<i>Search Images</i>' --> '<i>Parameters</i>' --> '<i>key(required)</i>'\
                                    \n<i>3</i>) –¢–≤–æ–π API –≤—ã–¥–µ–ª–µ–Ω –∑–µ–ª—ë–Ω—ã–º (–µ—Å–ª–∏ —Ç—ã –≤–æ—à—ë–ª –Ω–∞ —Å–∞–π—Ç), –ª–∏–±–æ –≤ —Ç–æ–º –∂–µ –º–µ—Å—Ç–µ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç\
                                    \n<i>4</i>) <b>–°–∫–æ–ø–∏—Ä—É–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ, –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª</b>\
                                    \n<i>5</i>) –û—Ç–ø—Ä–∞–≤—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º") #–û–†–§–û–ì–†–ê–§–ò–Ø
    redis_bot.sadd('todelete', d.message_id)
    await state.set_state(tokenfsm.tokenpix)

@register_router.message(tokenfsm.tokenpix, F.text)
async def reg_pix(message: Message, state: FSMContext):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        if message.text[0] == "/" or len(message.text) != 34: #–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            d=await message.answer(text="<b>–¢–æ–∫–µ–Ω –Ω–µ –ø–æ—Ö–æ–∂ —Å–∞–º –Ω–∞ —Å–µ–±—è</b>, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")
            await sleep(2)
            await bot.delete_message(chat_id=message.chat.id, message_id=d.message_id)
        else:
            redis_reg.set('tokenpix', message.text)  
            coll.update_one({'_id': message.from_user.id}, {"$set": {'tokenpix': message.text}})
            await bot.delete_message(chat_id=message.chat.id, message_id=int(redis_bot.spop('todelete')))
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            await state.clear()
            await message.answer(reply_markup=unreg_kb(), 
                                text=f"<b>–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω</b>\
                                    \n\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å —Å–≤–æ–±–æ–¥–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º <i>Pixabay</i>\
                                    \n\n–ü–æ –∫–Ω–æ–ø–∫–µ <b>Exit</b> –≤—ã–π–¥–µ—à—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\
                                    \n\n{'–õ–∏–±–æ –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–æ–≤, –≤—ã–±—Ä–∞–≤ —Å–µ—Ä–≤–∏—Å –Ω–∏–∂–µ' if len(get_reg()) < 3 else ''}")    

#====================ü¢Éü¢Éü¢É===FSM_REGISTERING_PEXELS_token===ü¢Éü¢Éü¢É=====================================================================================================================

@register_router.callback_query(F.data == 'pex_reg')
async def start_reg_pex(callback: CallbackQuery, state: FSMContext):
    callback.answer()
    d=await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="Pexels", url="https://www.pexels.com/api/")]]),
                                text = "<i>Pexels</i>\
                                    \n\n–ü–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç <i>Pexels</i>\
                                    \n\n<b>–ü–æ–∂–∞–π–ª—É—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª–µ–¥—É–π –∫–∞–∂–¥–æ–º—É –ø—É–Ω–∫—Ç—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>‚Ü¥\
                                    \n<i>1</i>) –ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —Ç—ã –ø–æ–ø–∞–¥–∞–µ—à—å –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É API\
                                    \n<i>2</i>) –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '<i>Get started</i>' –∏ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç\
                                    \n<i>3</i>) –î–∞–ª–µ–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É(–∞–Ω–∫–µ—Ç—É), –¥—É–º–∞—é —Ç—ã —Ä–∞–∑–±–µ—Ä—ë—à—å—Å—è –∫–∞–∫ –∏–º–µ–Ω–Ω–æ, <b>–Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ</b>, —á—Ç–æ–±—ã —Å–º—ã—Å–ª –±—ã–ª –≤ '—É—á–µ–±–Ω—ã—Ö —Ü–µ–ª—è—Ö'\
                                    \n<i>4</i>) –ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ–±—è –ø–µ—Ä–µ–∫–∏–Ω–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–≤–æ–∏–º API-–∫–ª—é—á–æ–º\
                                    \n<i>5</i>) <b>–°–∫–æ–ø–∏—Ä—É–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ, –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª</b>\
                                    \n<i>6</i>) –û—Ç–ø—Ä–∞–≤—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º") #–û–†–§–û–ì–†–ê–§–ò–Ø
    redis_bot.sadd('todelete', d.message_id)
    await state.set_state(tokenfsm.tokenpex)    

@register_router.message(tokenfsm.tokenpex, F.text)
async def reg_pex(message: Message, state: FSMContext):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        if message.text[0] == "/" or len(message.text) != 56:  #–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            d=await bot.send_message(chat_id=message.chat.id,
                                text="<b>–¢–æ–∫–µ–Ω –Ω–µ –ø–æ—Ö–æ–∂ —Å–∞–º –Ω–∞ —Å–µ–±—è</b>, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!\
                                    \n\n–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞ —Ç—ã —Å–º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞")
            await sleep(2)
            await bot.delete_message(chat_id=message.chat.id, message_id=d.message_id)
        else:
            redis_reg.set('tokenpex', message.text)  
            coll.update_one({'_id': message.from_user.id}, {"$set": {'tokenpex': message.text}})
            await bot.delete_message(chat_id=message.chat.id, message_id=int(redis_bot.spop('todelete')))
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            await state.clear()
            await message.answer(reply_markup=unreg_kb(), 
                                text=f"<b>–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω</b>\
                                    \n\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å —Å–≤–æ–±–æ–¥–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º <i>Pexels</i>\
                                    \n\n–ü–æ –∫–Ω–æ–ø–∫–µ <b>Exit</b> –≤—ã–π–¥–µ—à—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\
                                    \n\n{'–õ–∏–±–æ –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–æ–≤, –≤—ã–±—Ä–∞–≤ —Å–µ—Ä–≤–∏—Å –Ω–∏–∂–µ' if len(get_reg()) < 3 else ''}") 
          
#====================ü¢Éü¢Éü¢É===FSM_REGISTERING_UNSPLASH_token===ü¢Éü¢Éü¢É=====================================================================================================================

@register_router.callback_query(F.data == 'spl_reg')
async def start_reg_spl(callback: CallbackQuery, state: FSMContext):
    callback.answer()
    d=await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, 
                                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="Unsplash", url="https://unsplash.com/developers")]]),
                                text="<i>Unsplash</i>\
                                    \n\n–ü–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç <i>Unsplash</i>\
                                    \n\n<b>–ü–æ–∂–∞–π–ª—É—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª–µ–¥—É–π –∫–∞–∂–¥–æ–º—É –ø—É–Ω–∫—Ç—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>‚Ü¥\
                                    \n<i>1</i>) –ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —Ç—ã –ø–æ–ø–∞–¥–∞–µ—à—å –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É API\
                                    \n<i>2</i>) –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '<i>Register as a Developer</i>' –∏–ª–∏ '<i>Your apps</i>', –µ—Å–ª–∏ —Ç—ã –≤–æ—à—ë–ª –≤ –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ\
                                    \n<i>3</i>) –î–∞–ª–µ–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞–∂–∞—Ç—å <i>New Application</i>\
                                    \n<i>4</i>) –°—Ç–∞–≤–∏–º –≥–∞–ª–æ—á–∫–∏ –∏ —á–∏—Ç–∞–µ–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ (–ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏)\
                                    \n<i>5</i>) –°–ª–µ–¥—É—é—â–∏–º —à–∞–≥–æ–º –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É(–∞–Ω–∫–µ—Ç—É), –¥—É–º–∞—é —Ç—ã —Ä–∞–∑–±–µ—Ä—ë—à—å—Å—è –∫–∞–∫ –∏–º–µ–Ω–Ω–æ, <b>–Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ</b>, —á—Ç–æ–±—ã —Å–º—ã—Å–ª –±—ã–ª –≤ '—É—á–µ–±–Ω—ã—Ö —Ü–µ–ª—è—Ö'\
                                    \n<i>6</i>) –ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ–±—è –ø–µ—Ä–µ–∫–∏–Ω–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É, —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ <i>Application</i>\
                                    \n<i>7</i>) –¢–µ–ø–µ—Ä—å —Å–∫—Ä–æ–ª–∏—à—å –≤–Ω–∏–∑, –Ω–∞—Ö–æ–¥–∏—à—å —Ä–∞–∑–¥–µ–ª '<i>Keys</i>', –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–æ–ø–∏—Ä—É–µ—à—å '<i>Access-Key</i>', —ç—Ç–æ –∏ –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π API\
                                    \n<i>8</i>) <b>–°–∫–æ–ø–∏—Ä—É–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ, –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª</b>\
                                    \n<i>9</i>) –û—Ç–ø—Ä–∞–≤—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º") #–û–†–§–û–ì–†–ê–§–ò–Ø
    redis_bot.sadd('todelete', d.message_id)
    await state.set_state(tokenfsm.tokenspl)    

@register_router.message(tokenfsm.tokenspl, F.text)
async def reg_spl(message: Message, state: FSMContext):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        if message.text[0] == "/" or len(message.text) != 43:  #–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            d=await bot.send_message(chat_id=message.chat.id,
                                text="<b>–¢–æ–∫–µ–Ω –Ω–µ –ø–æ—Ö–æ–∂ —Å–∞–º –Ω–∞ —Å–µ–±—è</b>, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!\
                                    \n\n–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞ —Ç—ã —Å–º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞")
            await sleep(2)
            await bot.delete_message(chat_id=message.chat.id, message_id=d.message_id)
        else:
            redis_reg.set('tokenspl', message.text)  
            coll.update_one({'_id': message.from_user.id}, {"$set": {'tokenspl': message.text}})
            await bot.delete_message(chat_id=message.chat.id, message_id=int(redis_bot.spop('todelete')))
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            await state.clear()
            await message.answer(reply_markup=unreg_kb(),
                                text=f"<b>–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω</b>\
                                    \n\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å —Å–≤–æ–±–æ–¥–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º <i>Unsplash</i>\
                                    \n\n–ü–æ –∫–Ω–æ–ø–∫–µ <b>Exit</b> –≤—ã–π–¥–µ—à—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\
                                    \n\n{'–õ–∏–±–æ –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–æ–≤, –≤—ã–±—Ä–∞–≤ —Å–µ—Ä–≤–∏—Å –Ω–∏–∂–µ' if len(get_reg()) < 3 else ''}")